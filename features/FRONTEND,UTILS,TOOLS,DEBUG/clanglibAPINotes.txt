Attribute annotations: Test by creating functions and variables with various attributes (e.g., nonnull, deprecated) and verify compiler warnings or errors.
Availability annotations: Generate code snippets that use functions marked with availability attributes, testing different OS and version conditions.
Swift name annotations: Create functions and variables with Swift name annotations and test the generated Swift bindings for correct naming.
Nullability annotations: Write code snippets with parameters and return values annotated for nullability (_Nonnull, _Nullable) and test for correct compiler checks.
Audited regions: Enclose code regions with nullability audited start and end pragmas, and test for reduced explicit nullability annotations within the region.
Factory methods: Annotate functions as factory methods and test the ownership inference in the generated bindings.
Error handling: Annotate functions with error handling attributes and generate test cases to ensure correct error propagation in bindings.
Boolean properties: Annotate integer properties to be treated as boolean in bindings and test for correct type translation.
Enumerations and options: Annotate enums and bitfields for precise Swift representation and test for correct bridging and naming.
Class properties: Annotate static or class properties and test for their availability and naming in the generated bindings.
Initializers: Annotate functions as initializers and verify their mapping to init methods in bindings.
Instance methods: Annotate functions to be instance methods and test for correct class or instance association in bindings.
Designated initializers: Mark initializers as designated and test for correct initialization chain in bindings.
Subscripts: Annotate functions to generate subscript access in bindings and test for correct indexing behavior.
Lightweight generics: Annotate collections with element types and test for correct generic type bindings.
Unavailable APIs: Mark APIs as unavailable in certain conditions and test for compiler warnings or errors when accessed.
API renaming: Rename APIs using annotations and test for the old names being marked as deprecated and new names being adopted in bindings.
Objective-C property attributes: Annotate properties with Objective-C attributes (e.g., copy, retain, assign) and test for correct memory management in bindings.
Block type attributes: Annotate block types for correct reference capturing and test for memory management semantics in bindings.
C function pointer conversions: Annotate C function pointers for bridging to block types and test for correct type conversion in bindings.
Audited threading: Mark APIs as thread-safe or not and generate test cases to verify compiler warnings for unsafe thread access.
Custom annotations: Define and use custom API notes and test for their correct application and behavior in the compiler and generated bindings.