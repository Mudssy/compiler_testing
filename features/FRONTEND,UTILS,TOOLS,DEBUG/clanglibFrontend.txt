Lexical Analysis
Tokenization
Trigraphs processing
Line splicing
Comments removal
Preprocessing directives
Macro definition and expansion
Conditional compilation
Header file inclusion
Pragma handling
Source file encoding
Unicode support in identifiers
Floating-point literal parsing
Integer literal parsing
Character literal parsing
String literal concatenation
Syntax Analysis
Expression parsing
Statement parsing
Function definition parsing
Declaration parsing
Type parsing
Type qualifiers
Storage class specifiers
Struct, union, and enum definitions
Array declarations
Function pointer declarations
Inline functions
External and static variables
Automatic and register variables
Compound statements (blocks)
Selection statements (if, switch)
Iteration statements (for, while, do-while)
Jump statements (goto, continue, break, return)
Label and switch case handling
Initialization and assignment
Arithmetic operators
Relational and equality operators
Logical operators
Bitwise operators
Compound assignment
Increment and decrement operators
Conditional operator (ternary)
Comma operator
Type casts and conversions
sizeof and _Alignof operators
_Static_assert
Function calls
Array subscripting
Structure and union member access
Pointer dereference and address-of
Error handling and diagnostics
Warnings and errors reporting
Attribute syntax and semantics
GNU and C11 extensions
C99 features (e.g., variable-length arrays, flexible array members)
C11 features (e.g., _Generic, _Noreturn, _Thread_local)
Semantic Analysis
Scope and namespace handling
Identifier resolution
Type checking
Function overloading resolution
Constant expression evaluation
Implicit and explicit type conversions
Lvalue and rvalue distinctions
Array-to-pointer decay
Function-to-pointer decay
Block scope and linkage
External linkage resolution
Internal linkage resolution
Storage duration resolution
Tentative definitions handling
Inline and extern inline functions
Function prototype and old-style declaration
Enumeration constants
Struct and union layout
Bit-fields handling
Alignment and padding
Static and automatic storage duration variables
Thread storage duration variables
Volatile and const qualifiers
Restrict qualifier
Atomic operations and types
Incomplete type handling
Variable length arrays
Initializer list handling
Designated initializers
Compound literals
Statement expressions (GNU extension)
Asm statements (GNU extension)
Built-in functions and intrinsics
Predefined macros
Linkage specifications
Visibility attributes
DLL storage class specifiers
Pragma handling for optimizations and diagnostics
Cross-module and cross-language linkage
Compatibility with other C standards and extensions
Interoperability with C++
Deprecated features and backward compatibility handling