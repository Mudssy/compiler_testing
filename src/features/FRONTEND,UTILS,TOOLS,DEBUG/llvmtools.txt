LLVM Intermediate Representation (IR) Generation
LLVM IR Optimization Passes
LLVM IR to Machine Code Translation
LLVM IR Verifier
LLVM Bitcode Reader and Writer
Clang Static Analyzer Integration
LLVM Integrated Assembler
LLVM Disassembler
LLVM Symbol Table and Relocations Handling
LLVM Debug Information Generation
LLVM Profile Data Handling
LLVM Link Time Optimization (LTO)
LLVM Demangler for C Symbols
LLVM Coverage Mapping Generation
LLVM Archive Library Handling
LLVM Object File Manipulation
LLVM MCJIT Compilation Engine
LLVM Execution Engine for IR Interpretation
LLVM Call Graph and Control Flow Analysis
LLVM Constant Folding and Propagation
LLVM Dead Code Elimination
LLVM Loop Vectorization
LLVM Function Inlining
LLVM Global Variable Optimization
LLVM Pointer Alias Analysis
LLVM Memory Access Analysis
LLVM Instruction Combining
LLVM Loop Invariant Code Motion
LLVM Aggressive Dead Code Elimination
LLVM Sparse Conditional Constant Propagation
LLVM Interprocedural Sparse Conditional Constant Propagation
LLVM Tail Call Optimization
LLVM Scalar Replacement of Aggregates
LLVM Basic Alias Analysis
LLVM Loop Rotation
LLVM Loop Unrolling
LLVM Loop Unswitching
LLVM Indirect Branch Tracking
LLVM Block Frequency Inference
LLVM Machine Code Scheduling
LLVM Peephole Optimizations
LLVM Register Allocation
LLVM Stack Slot Coloring
LLVM Prologue and Epilogue Insertion
LLVM Machine Instruction Combining
LLVM Live Variable Analysis
LLVM Dead Register Elimination
LLVM Control Flow Graph Simplification
LLVM Instruction Scheduling
LLVM Machine Block Placement