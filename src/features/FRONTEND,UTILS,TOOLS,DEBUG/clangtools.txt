Lexer - Tokenization of C code
Preprocessor - Macro expansion
Preprocessor - Conditional compilation
Preprocessor - Header file inclusion
Preprocessor - Predefined macros
Parser - Declaration syntax
Parser - Function definition syntax
Parser - Statement syntax
Parser - Expression syntax
Semantic Analysis - Type checking
Semantic Analysis - Function calls and argument matching
Semantic Analysis - Lvalue and Rvalue distinctions
Semantic Analysis - Implicit and explicit type conversions
Semantic Analysis - Constant expressions
Semantic Analysis - Array subscripting and pointer arithmetic
Semantic Analysis - Struct and union access
Semantic Analysis - Enumerations
Semantic Analysis - Storage class specifiers
Semantic Analysis - Scope and linkage of identifiers
Semantic Analysis - Inline functions
Semantic Analysis - External and static assertions
Intermediate Representation (IR) Generation - Basic blocks and control flow
Intermediate Representation (IR) Generation - Data flow and SSA form
Optimization - Constant folding and propagation
Optimization - Dead code elimination
Optimization - Loop optimizations
Optimization - Function inlining
Optimization - Memory access optimizations
Code Generation - Register allocation
Code Generation - Instruction selection
Code Generation - Calling conventions
Code Generation - Stack frame management
Debug Information - Source code location tracking
Debug Information - Variable and type information
Diagnostic Messages - Syntax errors
Diagnostic Messages - Semantic errors
Diagnostic Messages - Warnings and suggestions
Cross-Language Interoperability - C linkage specification
Attributes and Extensions - GCC and Clang-specific extensions
Language Standards Compliance - C89/C90 standard features
Language Standards Compliance - C99 standard features
Language Standards Compliance - C11 standard features
Language Standards Compliance - C17/C18 standard features