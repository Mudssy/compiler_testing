DWARF Generation: Ensuring correct generation of DWARF debugging information.
Source Line Information: Testing accuracy of source line to machine code mapping.
Variable Information: Verifying that variable names, types, and scopes are correctly represented.
Function and Symbol Information: Ensuring functions and symbols are correctly demarcated and annotated with relevant debug information.
Type Information: Testing the representation of data types in debug information.
Scope and Namespace Information: Verifying the correct representation of scopes and namespaces.
Inlined Function Information: Ensuring inlined functions are correctly represented with their original source information.
Optimization Record Handling: Testing how optimizations are recorded and reflected in debug info.
Lexical Block Information: Verifying the correct representation of lexical blocks or scopes within functions.
Expression Evaluation Information: Ensuring correct representation of expressions for variable values, especially for optimized code.
Template and Generic Type Information: Testing the representation of template or generic types in debug info.
Enum and Constant Value Representation: Verifying enums and constant values are correctly represented.
Global Variable Information: Ensuring global variables are correctly annotated with debug info.
Debug Location Information: Testing the accuracy of debug location information for instructions and variables.
File and Directory Information: Verifying file and directory information is accurately represented.
External and Static Variable Handling: Ensuring correct handling of external and static variables in debug info.
Language-Specific Information: Testing language-specific debug information representation (e.g., C++ class hierarchies, C structures).
DWARF Extensions and Custom Attributes: Verifying support for DWARF extensions and custom attributes.
Cross-Module Debug Information: Testing debug information consistency across linked modules.
Debug Information for Optimized Code: Ensuring debug information remains useful and accurate even after code optimizations.
Platform-Specific Debug Information: Testing generation of debug information specific to target platforms or ABIs.
Error and Warning Handling: Verifying meaningful error and warning messages related to debug info generation.
Compatibility with Debuggers: Ensuring generated debug information is compatible with standard debuggers (e.g., GDB, LLDB).
Incremental Compilation and Debug Info: Testing debug information correctness in incremental compilation scenarios.
Debug Info for Asynchronous Code: Ensuring correct debug information for asynchronous or concurrent constructs.